#!/bin/bash
set -e
set -o pipefail
exec 3>&1 # use fd 3 for script output
exec 1>&2 # send normal stdout to stderr for logging

echo "Starting out"

payload="$(mktemp "$TMPDIR/k8s-resource-request.XXXXXX")"
cat > "$payload" <&0

rollback() {
    DEPLOYMENT=$1
    DRY_RUN=$2
    [ -n "$DEPLOYMENT" ] || exit 1
    echo "Running: $KUBECTL rollout undo deployment/$DEPLOYMENT"
    if [[ "$DRY_RUN" == "null" ]] || [[ "$DRY_RUN" == "false" ]]; then
        $KUBECTL rollout undo "deployment/$DEPLOYMENT"
    fi
}

deploy() {
    DEPLOYMENT=$1
    CONTAINER=$2
    IMAGE=$3
    DEPLOYMENT_PATH=$4
    IMG_PREFIX=$5
    DRY_RUN=$6

    [ -n "$DEPLOYMENT" ] || exit 1
    [ -n "$IMAGE" ] || exit 1
    [ -n "$CONTAINER" ] || exit 1

    $KUBECTL get deployments --show-labels --output=json > /tmp/deployments.json

    if [[ -n "$DEPLOYMENT_PATH" ]] && [[ "$DEPLOYMENT_PATH" != "null" ]] && [[ -n "$IMG_PREFIX" ]] && [[ "$IMG_PREFIX" != "null" ]]; then
        echo "Deployment path set to $DEPLOYMENT_PATH"
        echo "Image prefix set to $IMG_PREFIX"
        if [[ "$DRY_RUN" == "null" ]] || [[ "$DRY_RUN" == "false" ]]; then
            cat "${DEPLOYMENT_PATH}" | sed "s~image:[ \t]*\($IMG_PREFIX\/.*\).*~image: $IMAGE~" | $KUBECTL replace --record -f -
        fi
    else
        echo 'Setting image only.'
        if [[ "$DRY_RUN" == "null" ]] || [[ "$DRY_RUN" == "false" ]]; then
            $KUBECTL set image "deployment/$DEPLOYMENT" "$CONTAINER=$IMAGE" --record
        fi
    fi
}

start_job() {
    JOB=$1
    IMAGE=$2
    UID=${3:-$(date +%s)}
    DRY_RUN=$4

    [ -n "$JOB" ] || exit 1
    [ -n "$IMAGE" ] || exit 1
    [ -n "$UID" ] || exit 1

    if [[ "$DRY_RUN" == "null" ]] || [[ "$DRY_RUN" == "false" ]]; then
        cat "$JOB" | IMAGE=$IMAGE UID=$UID envsubst | $KUBECTL create --record -f -
    fi
}

create_and_run_job() {
    JOB_NAME=$1
    DEPLOYMENT_PATH=$2
    DRY_RUN=$3

    [ -n "$JOB_NAME" ] || exit 1
    [ -n "$DEPLOYMENT_PATH" ] || exit 1

    if [[ "$DRY_RUN" == "null" ]] || [[ "$DRY_RUN" == "false" ]]; then
        # cleanup any stale jobs with this name
        $KUBECTL delete job $JOB_NAME 2&> /dev/null || true

        # create the job by creating a pod
        cat $DEPLOYMENT_PATH | envsubst | kubectl create -f -

        # wait for Kube job to go into Pending state
        while [ true ]; do
            phase=`$KUBECTL get pods -a --selector="name=$JOB_NAME" -o 'jsonpath={.items[0].status.phase}' || 'false'`
            if [[ "$phase" != 'Pending' ]]; then
                break
            fi
        done

        # attach to the output of this pod
        echo "************ $JOB_NAME output start ************"
        $KUBECTL attach $(kubectl get pods -a --selector="name=$JOB_NAME" -o 'jsonpath={.items[0].metadata.name}')
        echo "************ $JOB_NAME output end ************"

        # If job fails, delete it and return error to Concourse
        while [ true ]; do
          succeeded=`$KUBECTL get jobs $JOB_NAME -o 'jsonpath={.status.succeeded}'`
          failed=`$KUBECTL get jobs $JOB_NAME -o 'jsonpath={.status.failed}'`
        if [[ "$succeeded" == "1" ]]; then
            break
          elif [[ "$failed" -gt "0" ]]; then
            $KUBECTL delete job $JOB_NAME
            exit 1
          fi
        done
    fi
}

DEBUG=$(jq -r .source.debug < "$payload")
[[ "$DEBUG" == "true" ]] && { echo "Enabling debug mode.";set -x; }

cd "$1"

ls /root/.kube 2>/dev/null || echo '/root/.kube does not exist'
mkdir -p /root/.kube

KUBE_URL=$(jq -r .source.cluster_url < "$payload")
NAMESPACE=$(jq -r .source.namespace < "$payload")

KUBECTL="/usr/local/bin/kubectl --server=$KUBE_URL --namespace=$NAMESPACE"

# configure SSL Certs if available
if [[ "$KUBE_URL" =~ https.* ]]; then
    KUBE_CA=$(jq -r .source.cluster_ca < "$payload")
    KUBE_KEY=$(jq -r .source.admin_key < "$payload")
    KUBE_CERT=$(jq -r .source.admin_cert < "$payload")
    CA_PATH="/root/.kube/ca.pem"
    KEY_PATH="/root/.kube/key.pem"
    CERT_PATH="/root/.kube/cert.pem"

    echo "$KUBE_CA" | base64 -d > $CA_PATH
    echo "$KUBE_KEY" | base64 -d > $KEY_PATH
    echo "$KUBE_CERT" | base64 -d > $CERT_PATH

    KUBECTL="$KUBECTL --certificate-authority=$CA_PATH --client-key=$KEY_PATH --client-certificate=$CERT_PATH"
fi

export KUBECTL

ROLLBACK=$(jq -r .params.rollback < "$payload")
RUN_JOB=$(jq -r .params.rollback < "$payload")
RESOURCE_TYPE=$(jq -r .source.resource_type < "$payload")
RESOURCE_NAME=$(jq -r .source.resource_name < "$payload")
DRY_RUN=$(jq -r .params.dry_run < "$payload")

if [[ -z "$RESOURCE_TYPE" ]]; then
    RESOURCE_TYPE=$(jq -r .params.resource_type < "$payload")
fi

if [[ -z "$RESOURCE_NAME" ]]; then
    RESOURCE_TYPE=$(jq -r .params.resource_name < "$payload")
fi

if [[ "$RESOURCE_TYPE" = 'deployment' ]]; then
    if [[ "$ROLLBACK" = "true" ]]; then
        rollback "$RESOURCE_NAME" "$DRY_RUN";
    elif [[ "$RUN_JOB" = "true" ]]; then
        JOB_NAME=$(jq -r .params.job_name < "$payload")
        DEPLOYMENT_PATH=$(jq -r .source.deployment_file < "$payload")
        create_and_run_job "$JOB_NAME" "$DEPLOYMENT_PATH" "$DRY_RUN";
    else
        case $RESOURCE_TYPE in
            deployment)
            RESOURCE_PATH=$(jq -r .params.resource_path < "$payload")
            CONTAINER_NAME=$(jq -r .source.container_name < "$payload")
            DEPLOYMENT_PATH=$(jq -r .source.deployment_file < "$payload")
            IMG_PREFIX=$(jq -r .source.image_prefix < "$payload")

            if [[ "$DEPLOYMENT_PATH" == "null" ]]; then
                DEPLOYMENT_PATH=$(jq -r .params.deployment_file < "$payload")
            fi

            if [[ "$IMG_PREFIX" == "null" ]]; then
                IMG_PREFIX=$(jq -r .params.image_prefix < "$payload")
            fi

            if [[ "$CONTAINER_NAME" == "null" ]]; then
              CONTAINER_NAME=$RESOURCE_NAME
            fi

            IMG_FILE=$(jq -r .params.image_name < "$payload")
            IMG=$(cat "$IMG_FILE")
            TAG_FILE=$(jq -r .params.image_tag < "$payload")
            TAG=$(cat "$TAG_FILE")
            IMG="$IMG:$TAG"

            deploy "$RESOURCE_NAME" "$CONTAINER_NAME" "$IMG" "$DEPLOYMENT_PATH" "$IMG_PREFIX" "$DRY_RUN";;
            job)
            start_job "$RESOURCE_PATH" "$IMG" "$(date +%s)" "$DRY_RUN";;
            *)
            exit 1
        esac
    fi
fi

result="$(jq -n "{version:{container:\"$IMG\"}}")"
echo "Out complete"
echo "$result" | jq -s add  >&3
